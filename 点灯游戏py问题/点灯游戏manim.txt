《点灯游戏的数学解法》
又名：灭灯游戏,lights out game

【演示】配色：按钮=粉色圆，灯=浅蓝色方，格子线为白色。演示N=5,7,11

规则：在NxN的格子内，点击一个按钮，该格及周围的灯会被同时翻转。
【演示】5x5空白点击两个格子，灯随机状态点击一个格子
目标：从全暗状态将所有灯打开（或者全亮状态将所有灯关闭）。
【演示】5x5空白灯变为全亮，5x5依次点击按钮变为全亮

《引言》

连续按按钮两次，等同于没有按
【演示】5x5空白点击边缘和中间的格子两次
用不同顺序按按钮，灯的最终状态是一样的
【演示】5x5空白点击相邻2个格子（两个方向），5x5空白点击相邻4个格子，然后按照顺序消除

我们只需要考虑少于两次按按钮的情况，也就是按一次或者不按
格子内的所有按钮，我们只需要考虑按或者不按，不用关心按的顺序
【演示】5x5空白随机情况x3，同时显示按钮和灯状态

按钮：按或者不按
灯：亮或者不量
所有按钮的状态为一组，对应一组特定状态的灯
【演示】5x5将上面随机格子拆分按钮和灯，按钮左灯右
我们的目标是：找到一个按钮状态组，其对应灯的状态为全亮（全部翻转）。
那么，如何找到这样一个按钮状态组呢？
【演示】5x5问号到灯全亮（合并刚才的3个按钮矩阵和灯矩阵）

《穷举法》

一共有NxN个按钮，每个按钮有两种状态，因此所有按钮一共有2^NxN种状态。
对于任意一组按钮状态，灯组的状态是确定的。因此，我们只需要遍历所有2^NxN种按钮状态，观察每种情况下灯的状态即可。
例如，当N=2时，对应的状态为2^2x2=2^4=16。很快我们就能列举出所有的情况并得出结论
【演示】左边为16种按钮状态，右边为灯状态。中间为大的2x2按钮和灯，每出现一种状态左右就显示一种。最后满足的白色粗线圈出来
又例如，当N=3时，对应的状态为2^3x3=2^9=512。我们也可以穷举所有情况得出结论
【演示】和刚才一样，演示3x3
对于N=5，也就是一开始的经典问题，状态数为2^5x5=2^25=33554432，需要计算机来求解。
【演示】演示5x5的四种解法
当N=6时，状态数为2^36=68719476736，增长的太快，计算机也难以求解。
有没有更快更巧妙的解法呢？

《首行穷举法》

细心的小伙伴会发现，无论什么局面，我们都能顺着一个方向一行一行按按钮，从而点亮尽可能多的灯。
【演示】快速演示三种5x5随机局面，用首行穷举法点亮前4行灯，其中最后一种情况是全亮。（合并显示）
例如，我们第1行随机点击了几个按钮，第1行的灯会处于某种状态，其中有些灯是暗的。
【演示】慢速演示第1种随机局面，首先点击第1行的按钮并显示灯，并将暗的灯圈起来。
为了让第1行的灯全亮，如果我们不去按第1行的按钮，就只能按第2行对应列的按钮。
【演示】将第2行的格子圈起来，然后按按钮
这时候，第2行的某些灯仍旧是暗的。如果这个时候按第2行的按钮，会让第1行的灯又暗下去，因此只能按第3行的按钮。
【演示】将第2行暗灯再圈起来，然后按第3行的按钮
依次类推，直到按完最后一行的按钮
【演示】继续演示直到最后一行
如果最后一行的灯恰好全亮了，那么我们就找到了一种解法。
【演示】将最后一行暗灯圈起来
由于从第2行开始，每一行的按法都由上一行的灯状态唯一决定，只有第1行是随机的。
因此，我们只需遍历所有可能的第1行按法，再依次推算后续行的操作，得到最终灯的状态即可判断是否为解。
通过这种逐行之间的关系，我们把随机性限制在第1行，使穷举数量降到了2^N。
这个方法的复杂度仍是指数级别的。那么，有没有更快更巧妙的解法呢？

《叠加法》
刚才我们演示了通过行与行之间的关系来简化穷举，这是因为每一个按钮影响的灯范围是有限的。
事实上，对于NxN的格子来说，我们能做的操作只有NxN种，也就是按或者不按每个格子按钮。
【演示】左边是3x3每个按钮各按一次（9种），右边是9种灯状态
而按多个按钮相当于把多种操作叠加起来。对于某一特定的灯，只有某几种操作可以改变其状态。
【演示】将第1，第2，第4种操作相加。
有没有办法叠加多种操作后，只亮一个灯呢？
【演示】左边问号，右边亮一个灯。左边变为按钮组。
如果对于每一个灯，都有一组操作可以单独打开，那我们就能把这些操作都叠加起来，让所有灯全亮。
【演示】左边9种按钮组可以单独开灯，右边亮一个灯x9。叠加左右，右边全亮。

现在，我们观察3x3的格子，一共有九种操作。同时，可以翻转的灯也有九个。
【演示】回到左边是3x3每个按钮各按一次（9种），右边是9种灯状态
如果第1、第2种操作都翻转了第1个灯，那么我们可以把第1、第2种操作叠加起来。
新的操作一定不会翻转第1个灯，把它替换掉第2种操作。
【演示】将1加到2
同样，如果第1，第4种操作会同时翻转第1个灯，也叠加起来，替换掉第4种操作。
如此一来，只有第1种操作能够翻转第1个灯。
【演示】将1加到4，将第1个灯圈出来（全部9个）

接着我们看第2个灯。
同样的，在第3到第9种操作中，找到会翻转第2个灯的操作，叠加并替换第2种操作。
如果第2种操作没有翻转第2个灯，那就直接和第2种操作交换。
【演示】圈出第2种操作（第n种操作交换）的灯，然后和刚才一样加到其余操作上
重复以上步骤，第n种操作可以翻转第n到第9个灯。
最终你会发现，第9种操只会翻转第9个灯，于是我们便发现了单独打开第9个灯的操作。
【演示】圈出第9种操作和灯

然后，我们再回过来考察第8种操作。第8种操作可能会翻转第8和第9个灯。
它也会翻转第9个灯，我们把刚才单独翻转第9个灯的操作叠加上去起来，九就得到单独翻转第8个灯的操作。
【演示】将9加到8
然后，对第7个操作也是如此，将第8和第9个操作叠加上去。
最终，我们得到了全部单独翻转第1到第9个灯的操作。把这9个操作叠加起来，就得到了最终解。
【演示】继续消除

事实上，我们可以将所有按钮和灯排列成一行。所有按钮和灯行程一个矩阵。
【演示】将按钮灯变为一行（按钮是单位矩阵E，灯是矩阵A）9x9
不难发现，我们刚才的操作，就是对这个矩阵进行高斯消元。
即通过把一行加到另一行，或交换行的位置，让矩阵变为上三角矩阵，最后再变为单位矩阵。
【演示】高斯消元

对于5x5的格子，我们也是如此操作。只不过有时候某些操作产生的效果是“没有翻转任何灯”，让我们称之为静默操作。
【演示】25x25，从E（按钮）和A（灯），变为逆矩阵R和操作后的单位矩阵E'
可以注意到，消元后的矩阵最后两行，灯矩阵的部分为空白，也就是没有翻动
【演示】圈出最后两行，然后再变换为5x5
将其两两组合，再加上空白操作，我们一共得到了4种静默操作
【演示】4种静默操作
将其余23种操作叠加起来，我们可以得到5x5的解
【演示】叠加23种操作
将这个操作和四种静默操作叠加起来，我们就得到了5x5的所有四个解法
【演示】叠加4种解法
对于5x5的格子，可能的操作有2^NxN种，而灯的状态也有2^NxN种。
由于静默操作的存在，至少有两种操作对应同一种灯的状态（没有翻转任何灯)，
因此这种情况下，总会有一种灯的状态，没法通过操作获得。例如仅翻转第一个灯。

另一种类似的解法
一个按钮会影响周围的灯，同样，一个灯也只能被附近几个按钮翻转。
因此，我们可以直接将灯的最终状态表示为若干个按钮的叠加，而这个最终状态是全亮。
【演示】按钮矩阵（A），以及灯向量（全亮）
前者，我们对灯矩阵消元，相当于乘上它的逆矩阵。同时，对按钮矩阵（单位矩阵）也做同样的操作，结果就是这个逆矩阵。
这样我们就获得了单开灯和按钮直接对应的关系，最后将其全部叠加起来获得了解。
【演示】再演示一遍
现在，我们同样对按钮矩阵消元，乘上它的逆矩阵。同时，对灯向量也做同样的操作，便获得了按钮的状态，也就是解。
这个操作就是用逆矩阵去乘这个灯向量。由于灯向量是全亮，根据矩阵向量乘法，这个操作恰好等同于前面把所有按法叠加起来。
【演示】直接乘法获得解

这个过程需要根据每一个灯的状态，不断叠加和消去按钮行。
因为灯有NxN个，按钮也要从左到右遍历NxN个，而且每一行都要和N×N个按钮叠加，因此这个方法的复杂度为(NxN)^3=N^6。

那么，还有没有更快更巧妙的解法呢

《首行叠加法》
刚才，我们对所有按钮和所有灯视为整体，然后对其进行叠加的动作。我们没有区分每一行。
但是，从一开始的穷举法和首行穷举法，我们得知，行与行是有联系的。
只要知道第一行的按钮状态，就可以推得最后一行灯的状态。
【演示】再完整演示首行穷举法
那么，是否可以将叠加法和首行穷举法结合呢？最后一行灯的状态是否能用第一行按钮的状态表示出来呢？

从首行穷举法我们知道，一个灯的状态可以由其上、左、中、右四个按钮的状态叠加起来。而下一行的按钮又是这个灯的翻转。
这里需要注意，两个状态叠加再翻转，等同于将其中一个状态翻转，然后再和另一个状态叠加起来。
【演示】not (a xor b)=a xor not (b)
因此，在这个过程中，我们可以将翻转的情况单独的列出来。

需要注意的是，如果第一行的某个按钮被叠加了两次，那就等同于没有叠加。同样，如果灯被翻转两次，也等同于没有翻转。
通过这个方法，我们可以由第一行按钮的状态开始，不断推导，得到最后一行灯是由第一行哪几个按钮叠加。
【演示】5x5首行叠加法
通过这种办法，我们得到了一种与叠加法类似的思路，灯的最终状态表示为若干个按钮的叠加。
只不过这一次，灯和按钮都只有N个。
【演示】将最后灯变5x5为矩阵

同样，由于灯的最终状态组成的向量应该是全亮。
不过，由于我们刚才的操作过程中，灯的状态根据按钮的状态进行了翻转，最终灯向量的情况也需要翻转。
【演示】将翻转矩阵（向量）移动到灯向量
同样，我们对矩阵消元，同时操作灯向量，最终得到第一行按钮的状态。
【演示】将5x5矩阵消元，灯向量消元
可以注意到，消元后的矩阵和之前25x25的情况一样，最后两行为静默操作，恰好对应刚才25x25的情况。
【演示】将静默操作推演
同样，将前3行矩阵叠加起来也是其中的一种解法，结合四种静默状态得到四种解法。
【演示】将矩阵叠加成为一种解，并叠加四种静默，然后再推演
不难得出结论，这个方法和刚才的叠加法一样，只不过矩阵规模从NxN变为了N，因此复杂度就是N^3。

《优化生成矩阵》
在首行叠加法种，我们首先要得到第一按钮和最后一行灯关系的矩阵，这个矩阵是需要推导生成的。
我们将每一个灯都分开来推导，但实际上这些灯之间是有关联的。
【演示】5x5首行叠加法，分别圈出每个灯，以及右边的向量
我们将矩阵重排，每个矩阵变为了某一行灯的状态。可以观察到，这些矩阵有着高度的对称性。
【演示】重排矩阵
事实上，仔细观察这些矩阵可以发现，每个格子的上下左右四个格子的状态数量恰好是偶数个。
【演示】圈出多个4个格子
由于最后一个矩阵才是我们需要的，因此我们只需要知道最后一个矩阵的第一行，就可以推得余下的。
【演示】单独列出最后矩阵，从第一行推导后面几行
因此，我们只需要推导第一个灯的状态，就可以得到所有灯的状态，减少了复杂度。

《解的数量》
刚才我们发现，对于5x5的格子，因为有两组静默操作，和前面的解共同构成了四种解法。
【演示】演示5x5首行叠加法，圈出最后两行
而对于3x3的格子，由于没有静默操作，因此解法是唯一的。
【演示】演示3x3首行叠加法，圈出整个矩阵E'
那么，对于NxN的格子来说，最多可能有多少组静默操作呢？
我们观察4x4的格子，并用首行叠加法求解。
这次我们意外的发现，所有的按钮都被抵消了，我们得到了一个零矩阵
【演示】4x4首行叠加法
这也就意味着，4x4的格子有四组独立的静默操作，叠加组合后也就是16种。
我们知道，第一行按钮的状态也就只有16种，也就是说，所有16种按钮状态都是静默操作。
这是正确的。这里可以看到，任意一种第一行按钮的状态，我们都能使用后面三行的按钮消除所有灯。
【演示】16种状态依次消除
同样，由于有16种组合后的静默操作，因此也就意味着有16种解法。
这里，我们也可以看到，从任意一种第一行按钮的状态，我们也能使用后面三行的按钮点亮所有灯。
【演示】16种状态依次点亮
因此对于4x4的格子，其解的数量就是16种。
同时，由首行叠加法可以得知，后续行的按钮由第一行确定，解法数量取决于静默操作，因此NxN格子的解最多为2^N种。
这里列出了N=1到16的情况。这个序列被OEIS收录到了：https://oeis.org/A075462
【演示】N=1-16的矩阵E'

关于这个矩阵的秩，有以下公式：

( f(0, x) = 1 )
( f(1, x) = x )
( f(2, x) = (1 + x)^2 )
( f(n+1, x) = x * f(n, x) + f(n-1, x) )
[r(n) = \deg(\gcd(f(n, x), f(n, 1 + x)))]

并且有以下推论：

1. (a(n)) 一定是 **偶数**
2. (a(n) <= n)
3. 对所有自然数 (n, k)：[a(nk - 1) \geq a(n - 1)]


《可解性》
刚才我们探讨了解的数量，但是没有证明解一定存在。那么对于普通的点灯游戏，是否一定存在解呢？
答案是肯定的，而且我们甚至不用局限于方阵，结论可以推广到任意形状和空间布局的点灯游戏。
事实上，只要点灯游戏满足以下两个要求，那它就是可解的：
1. 自反性：每个按钮a会翻转灯a
2. 对称性：如果按钮a会翻转灯b，那么按钮b也会翻转灯a
【演示】
这里，让我用简单的语言，使用数学归纳法，证明所有的点灯游戏都是可解的。

首先对于1，2个按钮的游戏来说，这是显然的。对于3个按钮的游戏来说，任意空间布局也是可行的。
【演示】1,2,3按钮的点灯游戏，灯和按钮放在一起，举多个情况
下面，让我们来证明，如果n个按钮的点灯游戏都是可解的，那n+1也一定是。

我们的目标是，通过多个n个按钮的点灯游戏的解法，来构造任意一个n+1个按钮点灯游戏的解法。
【演示】4个3按钮点灯，右边是2x2点灯，中间箭头
这里以2x2的格子为例，这个方阵由4个按钮。我们随意去掉一个格子，得到了一个3个按钮的点灯游戏。
【演示】4按钮去掉1个动画，变成3按钮（格子）
前面我们已经证明了，任意3个按钮的点灯游戏都是可解的。
现在我们找到一种解法，并把前面去掉的按钮和灯加回去。
【演示】3按钮解法（加上按钮和灯）
因为3个按钮游戏种的灯被全部点亮，4个按钮种的这三个灯也会被点亮。
【演示】圈出3按钮/灯

对于新加进去的第四个灯，如果它也恰好被点亮了，那所有灯被点亮，于是这个3按钮解法就是4按钮的解法。
【演示】将第四个灯点亮
如果第四个灯没有被点亮。我们再考虑去掉另外一个灯的游戏。一共有4种3个按钮的游戏。
【演示】4种3按钮，然后再加格子。
和刚才一样，只要有一种情况可以恰好点亮所有的灯，那我们就找到了这个4按钮游戏的解法。
不幸的是，对于这个2x2的格子来说，所有4种情况都只点亮了三个灯，都不是4按钮游戏的解法。
【演示】圈出四个单独的灯

现在，我们找到了4种在2x2格子游戏中同时3个灯的操作，我们把这些操作叠加起来。
由于每次除了被去掉的灯都被翻转，因此叠加后每个灯都被翻转了n次。这里n=3是奇数，因此它们都被点亮了。
【演示】2x2格子，依次加3按钮（4种），并给灯写上数字，然后去掉数字3
由此，我们证明了将所有4种操作叠加起来的操作，恰好是这个点灯游戏的解法。
【演示】只展示最终结果
同样道理，我们可以用相同的办法证明其余任意空间布局的4个按钮点灯游戏也是可解的。
【演示】快速演示Z形状

刚才每个灯被翻转了3次，是因为这是4个按钮的点灯游戏。如果按钮数为奇数又会如何呢？
这次让我们考虑另一种情况，这次我们以3x3的格子为例。我们假设所有8个按钮的点灯游戏都是可解的。
【演示】8种情况，箭头，9按钮游戏
和刚才一样，我们分别去掉一个格子，找到8种8按钮游戏的解
【演示】9种9个格子，去掉格子，加上按钮灯
现在，我们把它叠加起来。由于灯被翻转偶数次，所有灯都是暗的。
【演示】叠加9种解法

为了解决这个问题，我们可以先点击中间的按钮。现在有5个灯被翻转了，4个角落的灯没有翻转。
【演示】点击中间按钮
现在，我们分别叠加左上，右上，左下，右下四个操作，发现这些操作恰好翻转了4个灯。
因此，将这四个操作叠加起来，再加上中间的按钮，就是我们的解。
【演示】叠加左上，右上，左下，右下
之所以会这样，是因为这四个操作会翻转除了角落以外的所有灯，相当于单独翻转角落的灯，然后再翻转所有的灯。
因为操作是偶数次，翻转所有灯的操作被抵消了，于是就得到了翻转这四个灯的操作。
【演示】拆分四个操作，然后再叠加
因此，我们可以用这个办法，叠加特定操作，翻转任意偶数个灯。
于是，我们只要找到任意一个翻转奇数个灯的操作，再叠加偶数灯的操作，就可以翻转所有灯。
【演示】这次点亮左上角三个灯，再叠加其余的。
显然，对于任意一个点灯游戏，翻转奇数个灯的操作总是存在的，因此这个办法是可行的。
由此，我们便证明了对于任意点灯游戏，我们都能找到解法。
【演示】再次演示2x2，3x3

事实上，这个证明可以用形式语言表达：

若A是一个自反且对称的矩阵，那么在模2意义下有：[x A x^T = x I x^T = x x^T]，
若x是一个静默图案，即xA=0，则：[x x^T = x A x^T = 0 x^T = 0]，
也就是说，x中被按下的按钮数必为偶数，因此在任何自反且对称的点灯游戏都是可解的。

同时，这个证明和图论息息相关：

1.把游戏看成带自环（自反）的无向图：顶点=按钮/灯，边=翻转（对称）。
2.反设存在最小不可解，顶点数为n。去掉任意顶点i，子图可解⇒得到操作P_i：除i外全亮。
3.叠加所有P_i：每个点被翻n-1次。若n为偶，则全翻奇数次⇒可解，矛盾⇒n必奇。
4.若存在能翻奇数个点的操作S，叠加相应的P_i可得全翻⇒可解，矛盾⇒任意操作都翻偶数个点。
5.握手引理：奇数顶点的无向图中，必有点的“他邻度”为偶。按该点：他邻翻偶数次+自环翻1次=奇数，矛盾。
结论：不可解例不存在⇒必可解。


《更快的解法？》
为了寻找更快的解法，我们可以尝试思考这些方向：
1. 分块与快速矩阵乘法
使用 Strassen 等快速乘法，把求逆/消元改写为“若干次矩阵乘法”，在分块基础上减少乘法次数，整体约 O(n^2.807)（更快的理论乘法可到 O(n^2.373)）。
2. 对称与矩阵分解
利用矩阵的对称/重复结构做 LUP/LDLᵀ（类 Cholesky） 等结构化分解，直接对行/列（或块）消元；若与快速乘法结合，可降至 O(n^ω)。
3. 图论
将盘面变成点—边网络，用零强制集/LSP风格的分解指导分块与消元顺序、减少“填充”；再配合类似 Coppersmith–Winograd 的快速乘法，目标把复杂度逼近 O(n^ω)。
4. 递推降维
用多项式递推先算出自由度 a(n) 与“首行→末行”的最小关系阶 r（r≤n），随后把求解规模从 n 压到 r，把 O(n^3) 变成 O(r^3)。

因为 UP 主能力有限，有更好的主意或实现思路的朋友，欢迎在评论区留言交流！


《参考文献》

[1] Jaap Scherphuis，《点灯问题游戏的数学原理》  
    https://www.jaapsch.net/puzzles/lomath.htm
[2] Granvallen，《点灯游戏与数学之美》  
    https://granvallen.github.io/lightoutgame/
[3] axpokl，《点灯游戏 Flip Game 的 O(n³) 求解算法》  
    https://zhuanlan.zhihu.com/p/53646257
[4] Chao Xu，《逼零集、点灯游戏与线性方程组》  
    https://zhuanlan.zhihu.com/p/553780037
[5] GitHub — axpokl，《Pascal 实现的标准点灯问题问题 O(n³) 求解程序》  
    https://github.com/axpokl/LightOut
[6] GitHub — njpipeorgan，《大规模点灯问题问题求解器及解法说明》  
    https://github.com/njpipeorgan/LightsOut
[7] OEIS，《n×n 全亮点灯问题的解数》  
    https://oeis.org/A075462
[8] OEIS，《n×n 点灯问题问题的秩缺陷》  
  https://oeis.org/A159257

本视频由manimgl制作：
https://github.com/3b1b/manim
视频脚本：
 https://github.com/axpokl/LightOut...






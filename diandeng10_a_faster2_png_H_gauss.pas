procedure CalcMat2;var v,Cmat,Fmat,bL,bR:array[0..m-1,0..m-1]of Boolean; cvec,pvec,col,bvec,xvec:array[0..m-1]of Boolean; prev2,prev1,cura,chi,r0a,r1a,r2a,s0a,s1a,s2a,t0a,t1a,t2a,qpoly,qs1,qt1,tmp:array[0..m]of Boolean; ii,jj,kk,deg_r1,deg_r2,db,sh,def,k,ri,dj,rowp,pr,rr,cc:longint; left,right,s:boolean;begin def:=rank(n); k:=n-def; if def=0 then begin  for jj:=0 to n-1 do for ii:=0 to n-1 do v[jj,ii]:=false;  v[0,0]:=true;  for jj:=1 to n-1 do   for ii:=0 to n-1 do   begin    left:=false;    if ii>0 then if v[jj-1,ii-1] then left:=true;    right:=false;    if ii<n-1 then if v[jj-1,ii+1] then right:=true;    v[jj,ii]:=left xor right;   end;  for ii:=0 to n-1 do cvec[ii]:=l[ii,0];  for ii:=0 to n-1 do pvec[ii]:=false;  for ii:=n-1 downto 0 do  begin   s:=cvec[ii];   for jj:=ii+1 to n-1 do if v[jj,ii] and pvec[jj] then s:=s xor true;   pvec[ii]:=s;  end;  for ii:=0 to n do begin prev2[ii]:=false; prev1[ii]:=false; end;  prev2[0]:=true;  prev1[1]:=true;  if n=1 then for ii:=0 to n do chi[ii]:=prev1[ii] else  begin   for kk:=2 to n do   begin    for ii:=0 to n do cura[ii]:=false;    for ii:=0 to n-1 do if prev1[ii] then cura[ii+1]:=cura[ii+1] xor true;    for ii:=0 to n do if prev2[ii] then cura[ii]:=cura[ii] xor true;    for ii:=0 to n do begin prev2[ii]:=prev1[ii]; prev1[ii]:=cura[ii]; end;   end;   for ii:=0 to n do chi[ii]:=prev1[ii];  end;  for ii:=0 to n do  begin   r0a[ii]:=false;   r1a[ii]:=false;   r2a[ii]:=false;   s0a[ii]:=false;   s1a[ii]:=false;   s2a[ii]:=false;   t0a[ii]:=false;   t1a[ii]:=false;   t2a[ii]:=false;   qpoly[ii]:=false;   qs1[ii]:=false;   qt1[ii]:=false;   tmp[ii]:=false;  end;  for ii:=0 to n-1 do r0a[ii]:=pvec[ii];  for ii:=0 to n do r1a[ii]:=chi[ii];  s0a[0]:=true;  t1a[0]:=true;  while true do  begin   deg_r1:=-1;   for ii:=n downto 0 do if r1a[ii] then begin deg_r1:=ii; break; end;   if deg_r1<0 then break;   for ii:=0 to n do begin qpoly[ii]:=false; r2a[ii]:=r0a[ii]; end;   db:=deg_r1;   while true do   begin    deg_r2:=-1;    for ii:=n downto 0 do if r2a[ii] then begin deg_r2:=ii; break; end;    if (deg_r2<db) or (deg_r2<0) then break;    sh:=deg_r2-db;    qpoly[sh]:=qpoly[sh] xor true;    for ii:=0 to n do tmp[ii]:=false;    for ii:=0 to n-sh do if r1a[ii] then tmp[ii+sh]:=tmp[ii+sh] xor true;    for ii:=0 to n do r2a[ii]:=r2a[ii] xor tmp[ii];   end;   for ii:=0 to n do qs1[ii]:=false;   for sh:=0 to n do if qpoly[sh] then for ii:=0 to n-sh do if s1a[ii] then qs1[ii+sh]:=qs1[ii+sh] xor true;   for ii:=0 to n do s2a[ii]:=s0a[ii] xor qs1[ii];   for ii:=0 to n do qt1[ii]:=false;   for sh:=0 to n do if qpoly[sh] then for ii:=0 to n-sh do if t1a[ii] then qt1[ii+sh]:=qt1[ii+sh] xor true;   for ii:=0 to n do t2a[ii]:=t0a[ii] xor qt1[ii];   for ii:=0 to n do begin r0a[ii]:=r1a[ii]; r1a[ii]:=r2a[ii]; end;   for ii:=0 to n do begin s0a[ii]:=s1a[ii]; s1a[ii]:=s2a[ii]; end;   for ii:=0 to n do begin t0a[ii]:=t1a[ii]; t1a[ii]:=t2a[ii]; end;  end;  for ii:=0 to n-1 do col[ii]:=false;  for jj:=0 to n-1 do if s0a[jj] then for ii:=0 to n-1 do if v[jj,ii] then col[ii]:=col[ii] xor true;  for ii:=0 to n-1 do r[0,ii]:=col[ii];  for jj:=1 to n-1 do   for ii:=0 to n-1 do   begin    s:=false;    if ii>0 then s:=s xor r[jj-1,ii-1];    if ii<n-1 then s:=s xor r[jj-1,ii+1];    if jj>=2 then s:=s xor r[jj-2,ii];    r[jj,ii]:=s;   end; end else begin  for ii:=0 to k-1 do   for jj:=0 to k-1 do   begin    bL[ii,jj]:=l[ii,jj];    bR[ii,jj]:=false;   end;  for ii:=0 to k-1 do bR[ii,ii]:=true;  rowp:=0;  for cc:=0 to k-1 do  begin   pr:=rowp;   for rr:=rowp to k-1 do if bL[rr,cc] then begin pr:=rr; break; end;   if pr<>rowp then   begin    for jj:=0 to k-1 do    begin     s:=bL[rowp,jj]; bL[rowp,jj]:=bL[pr,jj]; bL[pr,jj]:=s;     s:=bR[rowp,jj]; bR[rowp,jj]:=bR[pr,jj]; bR[pr,jj]:=s;    end;   end;   for rr:=0 to k-1 do    if (rr<>rowp) and bL[rr,cc] then    begin     for jj:=0 to k-1 do bL[rr,jj]:=bL[rr,jj] xor bL[rowp,jj];     for jj:=0 to k-1 do bR[rr,jj]:=bR[rr,jj] xor bR[rowp,jj];    end;   rowp:=rowp+1;  end;  for jj:=0 to k-1 do  begin   for ii:=0 to k-1 do r[jj,ii]:=bR[jj,ii];   for ii:=k to n-1 do r[jj,ii]:=false;  end;  for ii:=0 to k-1 do   for jj:=0 to def-1 do    Cmat[ii,jj]:=l[ii,k+jj];  for ii:=0 to k-1 do   for jj:=0 to def-1 do   begin    s:=false;    for kk:=0 to k-1 do if r[ii,kk] and Cmat[kk,jj] then s:=s xor true;    Fmat[ii,jj]:=s;   end;  for dj:=0 to def-1 do  begin   ri:=k+dj;   for ii:=0 to k-1 do r[ri,ii]:=Fmat[ii,dj];   for ii:=0 to n-1 do    if ii>=k then    begin     if ii=k+dj then r[ri,ii]:=true else r[ri,ii]:=false;    end;  end; end; for ii:=0 to n-1 do bvec[ii]:=l[ii,-1]; for ii:=0 to n-1 do begin  s:=false;  for jj:=0 to n-1 do if r[ii,jj] and bvec[jj] then s:=s xor true;  xvec[ii]:=s; end; for ii:=0 to n-1 do l[ii,-1]:=xvec[ii];end;
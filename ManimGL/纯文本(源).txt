规则：在 $N\\times N$ 的格子内，点击一个按钮，该格及周围的灯会被同时翻转。
目标：从全暗状态打开所有灯（或者全亮状态关闭所有灯）。
对同一按钮点击两次，等同于没有按。
用不同顺序点击按钮，灯的最终状态是一样的。
因此，对格子内的按钮，我们只需考虑按或不按，并且不用关心顺序。
我们可以将按钮和灯分开表示，所有按钮的状态为一组，对应灯的状态为一组。
我们的目标是：找到一个按钮组，其对应灯的状态为全亮。那么，我们如何找到这样一个组按钮呢？
$N\\times N$ 个按钮共有 $2^{N\\times N}$ 种组合，每种组合对应唯一的灯状态。只要所有情况都试一遍，看看灯的状态如何即可。
例如，当 $N=2$ 时，对应的状态为 $2^{2\\times 2}=2^4=16$。很快我们就能列举出所有的情况并得出结论。
又例如，当 $N=3$ 时，对应的状态为 $2^{3\\times 3}=2^9=512$。我们也可以穷举所有情况得出结论。
对于 $N=5$，也就是一开始的经典问题，其状态数为 $2^{5\\times 5}=2^{25}=33\\,554\\,432$，需要计算机来求解。
当 $N=6$ 时，状态数为 $2^{36}=68\\,719\\,476\\,736$。复杂度增长得太快，计算机也难以求解。
那么，我们该怎么办呢？有没有更快更巧妙的解法呢？
细心的小伙伴会发现，无论什么局面，我们都能一行一行点击按钮，点亮尽可能多的灯。
例如，我们在第1行随机点击了几个按钮。此时，第1行的灯有些是亮的，有些是暗的。
为了让第1行的灯全亮，我们可以去按暗的灯下方的第2行的对应按钮。
这时候，第2行的某些灯是暗的。因为按第2行的按钮会熄灭第1行的灯，我们要按第3行的按钮。
重复这一步骤，直到按完最后一行的按钮。如果最后一行的灯恰好全亮了，那我们就找到了一种解法。
这里仍有灯是暗的，因此不是正确解法。让我们换一种解法。
这次，让我们点击第1行的前两个按钮。
经过递推，最后一行灯都被点亮了，因此这就是一种正确解法。
由于从第2行开始，每一行的按法都由上一行的灯确定，因此，我们只需遍历第1行的所有按法，递推最后一行灯即可。
通过这种行之间的关系，我们把随机性限制在第1行，使穷举量降到了 $2^N$。这里，我们在 32 种按法中找到了四种解法。
这个方法的复杂度仍是指数级别的。那么，有没有更快更精妙的解法呢？
对于 $N\\times N$ 的格子来说，我们的基本操作只有 $N\\times N$ 种，也就是按或者不按某个按钮。
对于某一特定的灯，只有周围几个按钮可以改变其状态。例如位于左上角的灯，只会被左上角的三个按钮影响。
按多个按钮相当于把多种操作叠加起来。我们把这三个操作叠加起来得到第1个灯的状态。
有没有办法叠加多种操作后，只亮一个灯呢？
如果每一个灯都可以单独点亮，那我们就能把这些操作都叠加起来，让所有灯全亮。
现在，让我们重新观察 $3\\times 3$ 的格子，共有九种操作，标记为操作1到9。
让我们观察第1个灯。这里，操作1、操作2都翻转了第1个灯。
现在，我们把操作1叠加到操作2上，操作2就不会翻转第1个灯了。
同样，操作4也会翻转第1个灯，我们也把操作1叠加到操作4上。
如此一来，只有操作1能够翻转第1个灯。
接着我们看第2个灯。
同样的，在操作2到9中，找到会翻转第2个灯的操作，把操作2叠加上去。
这里，由于操作2没有翻转第2个灯，我们就交换操作2和操作3的位置。
然后我们把操作2叠加到操作4和操作5上。
重复以上步骤，就能确保操作n只能翻转第n到9个灯。
由于操作9不能翻转第1到8个灯，只能翻转第9个灯，于是我们便发现了单独翻转第9个灯的操作。
然后，我们再回过来考察操作8，幸运的是，操作8可以单独翻转第8个灯。
我们再观察操作7。操作7会同时翻转第7个灯和第9个灯。
我们可以把操作9叠加上去，使操作7可以单独翻转第7个灯。
让我们继续去叠加剩余的操作。
最终，我们得到了全部单独翻转第1到第9个灯的操作。
现在，我们把这9个操作叠加起来，就得到了游戏的解法。
让我们再次重新观察这些 $3\\times 3$ 的格子。
事实上，我们可以将所有按钮和灯排列成一行。现在，所有按钮和灯排列成 $9\\times 9$ 的大矩阵。
不难发现，我们刚才的操作，就是对这个矩阵进行高斯消元。通过把一行加到另一行，或者交换两行，让矩阵变为上三角矩阵。
然后，再把行逆推回去，变为单位矩阵。
最后，再把所有行加起来，就得到一组完整的解法。
对于 $5\\times 5$ 的格子，我们也可以这样操作。我们生成按钮和灯矩阵，然后对其进行消元。
我们把25种操作叠加起来，这就是 $5\\times 5$ 的一种解法。
可以注意到，消元后的矩阵最后两行，灯矩阵的部分为空白。也就是说，这两组操作没有翻动任何灯，我们称之为静默操作。
我们将其两两组合，形成四种静默操作。
由于静默操作不会改变灯，我们也可以把它们分别和刚才的解法叠加。这也就是刚才首行穷举法得到的四种解法。
由于存在静默操作，至少有两种按法对应同一种灯的状态。因此，总会有一种灯的状态没法按出来，例如仅翻转第一个灯。
按钮会影响周围的灯，同样，灯也只会被附近的按钮翻转。因此，灯的最终状态可以表示为若干个按钮的叠加，也就是全亮。
前者，我们对按钮和灯矩阵进行消元，相当于同时乘以逆矩阵。现在，我们对灯向量做相同的操作，便获得了按钮的状态，也就是解法。
由于灯向量是全亮，矩阵和向量相乘，等同于把所有按法叠加。通过这个方法，我们无需求出逆矩阵，直接通过消元获得了解法。
因为灯和按钮各有 $N\\times N$ 个，每一行都有 $N\\times N$ 个按钮叠加，因此该方法的复杂度为 $(N\\times N)^3 = N^6$ 。
这个方法的复杂度是多项式级别的，但 $N\\times N$ 的矩阵仍然很大。那么，我们是否还能找到更快、更巧妙的解法呢？
刚才，我们把按钮和灯当作整体叠加，并未分行。然而，从首行穷举法可知，只要确定第一行按钮，就能推得最后一行灯。
是否可以将叠加法和首行穷举法结合，用第一行按钮直接表示最后一行的灯呢？
从首行穷举法可知，灯由周围的按钮确定，下一行的按钮则是灯的翻转。我们把一行的灯单独列出来，用按钮表示状态。
例如这里，左边第一行代表第一个灯由第1、2个按钮决定，旁边的蓝色方格代表按钮是灯的翻转。
注意，两个状态先叠加再翻转，等价于先翻转其中一个再叠加。因此，我们可以将翻转的情况单独列出来。
另外，如果某个按钮被叠加了两次，那就等同于没有叠加。同样，如果灯被翻转两次，也等同于没有翻转。
接着推导第二行，可由上一行按钮状态叠加确定，因为灯的翻转可以单独列出，也由灯的翻转状态叠加确定。
这里分别表示第二行第一个按钮和灯，分别为上一行的按钮或灯的叠加或翻转。
接着推导剩余的部分。
于是，我们可以由第一行按钮的状态开始，不断推导，得到最后一行灯是由第一行哪几个按钮叠加的。
最后，我们便得到了一种与叠加法类似的矩阵。只不过这一次，灯和按钮都只有 $N$ 个。
由于在推导的过程中灯进行了翻转，因此最终灯向量也是翻转过的状态。
现在，我们对矩阵消元，同时操作灯向量，最终得到第一行按钮的状态。
可以注意到，消元后的矩阵和之前 $25\\times 25$ 的情况一样，最后两行为静默操作，而右边的灯向量就是解法。
求出静默操作需要获得逆矩阵，有兴趣的小伙伴可以自己试一下。实际上，由于矩阵的高度对称性，这里的列向量和静默操作是相同的。
不难看出，和刚才的叠加法一样，这次矩阵规模从 $N\\times N$ 变为了 $N$，因此复杂度就是 $N^3$ 。
在首行叠加法中，需要得到第一按钮和最后一行灯关系矩阵，这个矩阵是需要推导生成的，并且不难看出其复杂度是 $N^3$ 。
我们将每一个灯都分开来推导，但实际上这些灯之间是有关联的。将矩阵重排后可以观察到，这些矩阵有着高度的对称性。
仔细观察这些矩阵可以发现，每个格子的上下左右四个格子的状态数量恰好是偶数个。
由于最后一个矩阵才是我们需要的，因此我们只需要知道最后一个矩阵的第一行，就可以推得余下的。
因此，我们只需要推导第一个灯的状态，就可以得到所有灯的状态，从而减少复杂度。
刚才我们发现，对于 $5\\times 5$ 的格子，因为有两组静默操作，和前面的解共同构成了四种解法。
而对于 $3\\times 3$ 的格子来说，由于没有静默操作，因此解法是唯一的。
那么，对于 $N\\times N$ 的格子来说，最多可能有多少组静默操作呢？现在，我们观察 $4\\times 4$ 的格子，并用首行叠加法求解。
这次我们意外的发现，所有的按钮都被抵消了，我们得到了一个零矩阵也就是说， $4\\times 4$ 的格子有四组独立的静默操作，叠加后就是16种。
由于第一行按钮的状态只有16种，因此所有16种都是静默操作。这里，任意一种第一行按钮，都能通过后三行消除所有灯。
同时，16种静默操作也对应着16种解法。这里，同样从任意一种第一行按钮，也能通过后面三行点亮所有灯。
因为 $N\\times N$ 格子第一行最多有 $2^N$ 种状态，因此$N\\times N$ 格子的解法最多为 $2^N$ 种。
这里列出了 $N=1$ 到 $N=16$ 的情况。这个序列被OEIS收录到了：https://oeis.org/A159257。
关于这个矩阵的秩，可以使用上述公式进行计算。
刚才我们探讨了解的数量，但是没有证明解一定存在。那么对于普通的点灯游戏，解是否一定存在呢？
事实上，只要点灯游戏满足两个要求，那它就是可解的。
这里的结论并不局限于方阵。事实上，任何形状和空间布局的点灯游戏都是可解的。
如果格子没有连成整体，则分开的部分不会互相影响。因此，我们只需要分别求解连起来的部分。
下面，让我用简单的方式，使用数学归纳法，来证明所有的点灯游戏都是可解的。
首先，让我们考虑只有1，2，3个按钮的情况。这里列举出了所有可能的布局，这些布局显然都是可解的。
现在，让我们把 $2\\times 2$ 的格子分别去掉一个格子，得到4个3个按钮的格子。
让我们求解这些3个按钮的格子，然后再将去除的格子补回来。
如果任意一个补回来的格子周围的按钮数是奇数，它就会被点亮。那么，这个解法就是4个按钮的解法。
不幸的是，所有补回来的格子周围的按钮数都是偶数，因此，所有这些格子都没有被点亮。
现在，让我们尝试把这4种状态叠加起来。可以看到，这次所有灯都被点亮了。
这是因为，有4种情况各翻转了3个灯，叠加后的4个灯就各翻转了3次。由于翻转次数是奇数，所有灯就都翻转了过来。
这也就是 $2\\times 2$ 的格子的解法，这个方法可以推广到任意偶数个按钮的游戏中。
对于奇数个按钮的游戏，我们又该怎么办呢？让我们考虑 $3\\times 3$ 的格子，并假定我们知道所有8个按钮游戏的解法。
和刚才一样，我们分别去掉了一个格子求解，再补回来。这里的9种情况恰好补回来的格子也都没有亮。
我们把它们叠加起来。由于每个灯翻转了偶数次，因此所有灯都是暗的。
为了解决这个问题，我们可以先点击中间的按钮，翻转5个灯。
然后，我们再依次叠加四个角的按法。现在，所有灯都被翻转了。
这是因为，四个角的按法相当于先翻转所有灯，再翻转单个灯。由于翻转了偶数次，因此相当于单独翻转了4个灯。
如此一来，我们恰好补足了刚才没有翻的偶数个灯，也就把所有灯点亮了。
不难证明，所有的点灯游戏，总有一种操作可以翻转奇数个灯，因此，我们可以用这种办法求解奇数个按钮的点灯游戏。
由此，我们便证明了，对于任意按钮数量的点灯游戏，我们总能找到解法。
事实上，这个证明可以用形式语言表达。
同时，这个证明和图论息息相关。
为了寻找更快的解法，我们可以尝试从这些方向思考问题。
由于 UP 主能力有限，有更好的想法或实现思路的朋友，欢迎在评论区留言交流！
